{"ast":null,"code":"export function WinCheck(board, turn) {\n  //const turn=props.turn;\n  //const board=props.board;\n  const combn = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 4, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6]];\n\n  for (let i = 0; i < combn.length; i++) {\n    let match = combn[i];\n\n    if (board[match[0]] === board[match[1]] && board[match[2]] === board[match[0]] && board[match[0]] === turn) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function pcMove(board) {\n  let possible = [];\n\n  for (let i = 0; i < 9; i++) {\n    if (board[i] === null) {\n      possible.push(i);\n    }\n  }\n\n  for (let plr of [\"O\", \"X\"]) {\n    for (let pos of possible) {\n      let copy = { ...board\n      };\n      copy[pos] = plr;\n\n      if (WinCheck(copy, plr)) {\n        return pos;\n      }\n    }\n  }\n\n  let corners = possible.filter(x => [0, 2, 6, 8].includes(x));\n  let edge = possible.filter(x => [1, 3, 5, 7].includes(x)); //console.log(corners,edge)\n\n  if (corners.length > 0) return corners[Math.floor(Math.random() * corners.length)];else if (4 in possible) return 4;else return edge[Math.floor(Math.random() * edge.length)];\n}","map":{"version":3,"sources":["/root/Desktop/front/portfolio/src/components/fun/calc.js"],"names":["WinCheck","board","turn","combn","i","length","match","pcMove","possible","push","plr","pos","copy","corners","filter","x","includes","edge","Math","floor","random"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAwBC,IAAxB,EAA6B;AAChC;AACA;AACA,QAAMC,KAAK,GAAC,CACJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADI,EAEJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFI,EAGJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHI,EAIJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJI,EAKJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CALI,EAMJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CANI,EAOJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPI,EAQJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARI,CAAZ;;AAUA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,KAAK,CAACE,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,QAAIE,KAAK,GAACH,KAAK,CAACC,CAAD,CAAf;;AACA,QAAIH,KAAK,CAACK,KAAK,CAAC,CAAD,CAAN,CAAL,KAAkBL,KAAK,CAACK,KAAK,CAAC,CAAD,CAAN,CAAvB,IAAqCL,KAAK,CAACK,KAAK,CAAC,CAAD,CAAN,CAAL,KAAkBL,KAAK,CAACK,KAAK,CAAC,CAAD,CAAN,CAA5D,IAA0EL,KAAK,CAACK,KAAK,CAAC,CAAD,CAAN,CAAL,KAAkBJ,IAAhG,EAAqG;AACjG,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH;AAED,OAAO,SAASK,MAAT,CAAgBN,KAAhB,EAAsB;AACzB,MAAIO,QAAQ,GAAC,EAAb;;AACA,OAAK,IAAIJ,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACjB,QAAIH,KAAK,CAACG,CAAD,CAAL,KAAW,IAAf,EAAoB;AAChBI,MAAAA,QAAQ,CAACC,IAAT,CAAcL,CAAd;AACH;AACJ;;AACD,OAAI,IAAIM,GAAR,IAAe,CAAC,GAAD,EAAK,GAAL,CAAf,EAAyB;AACrB,SAAK,IAAIC,GAAT,IAAgBH,QAAhB,EAAyB;AACrB,UAAII,IAAI,GAAC,EAAC,GAAGX;AAAJ,OAAT;AACAW,MAAAA,IAAI,CAACD,GAAD,CAAJ,GAAUD,GAAV;;AACA,UAAIV,QAAQ,CAACY,IAAD,EAAMF,GAAN,CAAZ,EAAuB;AACnB,eAAOC,GAAP;AACH;AACJ;AACJ;;AAID,MAAIE,OAAO,GAACL,QAAQ,CAACM,MAAT,CAAgBC,CAAC,IAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAUC,QAAV,CAAmBD,CAAnB,CAAnB,CAAZ;AACA,MAAIE,IAAI,GAACT,QAAQ,CAACM,MAAT,CAAgBC,CAAC,IAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAUC,QAAV,CAAmBD,CAAnB,CAAnB,CAAT,CApByB,CAqB1B;;AACC,MAAIF,OAAO,CAACR,MAAR,GAAe,CAAnB,EACI,OAAOQ,OAAO,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,OAAO,CAACR,MAAnC,CAAD,CAAd,CADJ,KAGK,IAAI,KAAKG,QAAT,EACD,OAAO,CAAP,CADC,KAGD,OAAOS,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,IAAI,CAACZ,MAAhC,CAAD,CAAX;AAGP","sourcesContent":["export function WinCheck(board,turn){\n    //const turn=props.turn;\n    //const board=props.board;\n    const combn=[\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,4,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [2,4,6]\n            ];\n    for(let i=0;i<combn.length;i++){\n        let match=combn[i];\n        if (board[match[0]]===board[match[1]] && board[match[2]]===board[match[0]] && board[match[0]]===turn){\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function pcMove(board){\n    let possible=[];\n    for (let i=0;i<9;i++){\n        if (board[i]===null){\n            possible.push(i);\n        }\n    }\n    for(let plr of [\"O\",\"X\"]){\n        for (let pos of possible){\n            let copy={...board};\n            copy[pos]=plr;\n            if (WinCheck(copy,plr)){\n                return pos;\n            }          \n        }\n    }\n    \n\n\n    let corners=possible.filter(x=>[0,2,6,8].includes(x));\n    let edge=possible.filter(x=>[1,3,5,7].includes(x));\n   //console.log(corners,edge)\n    if (corners.length>0)\n        return corners[Math.floor(Math.random() * corners.length)]\n\n    else if (4 in possible)\n        return 4\n    else \n        return edge[Math.floor(Math.random() * edge.length)]\n\n    \n}"]},"metadata":{},"sourceType":"module"}